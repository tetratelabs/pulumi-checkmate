// Copyright 2023 Tetrate
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class TcpEcho extends pulumi.CustomResource {
    /**
     * Get an existing TcpEcho resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TcpEchoState, opts?: pulumi.CustomResourceOptions): TcpEcho {
        return new TcpEcho(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkmate:index/tcpEcho:TcpEcho';

    /**
     * Returns true if the given object is an instance of TcpEcho.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TcpEcho {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TcpEcho.__pulumiType;
    }

    /**
     * The timeout for stablishing a new TCP connection in milliseconds
     */
    public readonly connectionTimeout!: pulumi.Output<number>;
    /**
     * Number of consecutive successes required before the check is considered successful overall. Defaults to 1.
     */
    public readonly consecutiveSuccesses!: pulumi.Output<number>;
    /**
     * If false, the resource will fail to create if the check does not pass. If true, the resource will be created anyway.
     * Defaults to false.
     */
    public readonly createAnywayOnCheckFailure!: pulumi.Output<boolean | undefined>;
    /**
     * The message expected to be included in the echo response
     */
    public readonly expectedMessage!: pulumi.Output<string>;
    /**
     * The hostname where to send the TCP echo request to
     */
    public readonly host!: pulumi.Output<string>;
    /**
     * Interval in milliseconds between attemps. Default 200
     */
    public readonly interval!: pulumi.Output<number>;
    /**
     * Arbitrary map of string values that when changed will cause the check to run again.
     */
    public readonly keepers!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The message to send in the echo request
     */
    public readonly message!: pulumi.Output<string>;
    /**
     * True if the check passed
     */
    public /*out*/ readonly passed!: pulumi.Output<boolean>;
    /**
     * The port of the hostname where to send the TCP echo request
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * Timeout for an individual attempt. If exceeded, the attempt will be considered failure and potentially retried. Default
     * 5000ms
     */
    public readonly singleAttemptTimeout!: pulumi.Output<number>;
    /**
     * Overall timeout in milliseconds for the check before giving up, default 10000
     */
    public readonly timeout!: pulumi.Output<number>;

    /**
     * Create a TcpEcho resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TcpEchoArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TcpEchoArgs | TcpEchoState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TcpEchoState | undefined;
            resourceInputs["connectionTimeout"] = state ? state.connectionTimeout : undefined;
            resourceInputs["consecutiveSuccesses"] = state ? state.consecutiveSuccesses : undefined;
            resourceInputs["createAnywayOnCheckFailure"] = state ? state.createAnywayOnCheckFailure : undefined;
            resourceInputs["expectedMessage"] = state ? state.expectedMessage : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["keepers"] = state ? state.keepers : undefined;
            resourceInputs["message"] = state ? state.message : undefined;
            resourceInputs["passed"] = state ? state.passed : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["singleAttemptTimeout"] = state ? state.singleAttemptTimeout : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
        } else {
            const args = argsOrState as TcpEchoArgs | undefined;
            if ((!args || args.expectedMessage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'expectedMessage'");
            }
            if ((!args || args.host === undefined) && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            if ((!args || args.message === undefined) && !opts.urn) {
                throw new Error("Missing required property 'message'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            resourceInputs["connectionTimeout"] = args ? args.connectionTimeout : undefined;
            resourceInputs["consecutiveSuccesses"] = args ? args.consecutiveSuccesses : undefined;
            resourceInputs["createAnywayOnCheckFailure"] = args ? args.createAnywayOnCheckFailure : undefined;
            resourceInputs["expectedMessage"] = args ? args.expectedMessage : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["keepers"] = args ? args.keepers : undefined;
            resourceInputs["message"] = args ? args.message : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["singleAttemptTimeout"] = args ? args.singleAttemptTimeout : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["passed"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TcpEcho.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TcpEcho resources.
 */
export interface TcpEchoState {
    /**
     * The timeout for stablishing a new TCP connection in milliseconds
     */
    connectionTimeout?: pulumi.Input<number>;
    /**
     * Number of consecutive successes required before the check is considered successful overall. Defaults to 1.
     */
    consecutiveSuccesses?: pulumi.Input<number>;
    /**
     * If false, the resource will fail to create if the check does not pass. If true, the resource will be created anyway.
     * Defaults to false.
     */
    createAnywayOnCheckFailure?: pulumi.Input<boolean>;
    /**
     * The message expected to be included in the echo response
     */
    expectedMessage?: pulumi.Input<string>;
    /**
     * The hostname where to send the TCP echo request to
     */
    host?: pulumi.Input<string>;
    /**
     * Interval in milliseconds between attemps. Default 200
     */
    interval?: pulumi.Input<number>;
    /**
     * Arbitrary map of string values that when changed will cause the check to run again.
     */
    keepers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The message to send in the echo request
     */
    message?: pulumi.Input<string>;
    /**
     * True if the check passed
     */
    passed?: pulumi.Input<boolean>;
    /**
     * The port of the hostname where to send the TCP echo request
     */
    port?: pulumi.Input<number>;
    /**
     * Timeout for an individual attempt. If exceeded, the attempt will be considered failure and potentially retried. Default
     * 5000ms
     */
    singleAttemptTimeout?: pulumi.Input<number>;
    /**
     * Overall timeout in milliseconds for the check before giving up, default 10000
     */
    timeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a TcpEcho resource.
 */
export interface TcpEchoArgs {
    /**
     * The timeout for stablishing a new TCP connection in milliseconds
     */
    connectionTimeout?: pulumi.Input<number>;
    /**
     * Number of consecutive successes required before the check is considered successful overall. Defaults to 1.
     */
    consecutiveSuccesses?: pulumi.Input<number>;
    /**
     * If false, the resource will fail to create if the check does not pass. If true, the resource will be created anyway.
     * Defaults to false.
     */
    createAnywayOnCheckFailure?: pulumi.Input<boolean>;
    /**
     * The message expected to be included in the echo response
     */
    expectedMessage: pulumi.Input<string>;
    /**
     * The hostname where to send the TCP echo request to
     */
    host: pulumi.Input<string>;
    /**
     * Interval in milliseconds between attemps. Default 200
     */
    interval?: pulumi.Input<number>;
    /**
     * Arbitrary map of string values that when changed will cause the check to run again.
     */
    keepers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The message to send in the echo request
     */
    message: pulumi.Input<string>;
    /**
     * The port of the hostname where to send the TCP echo request
     */
    port: pulumi.Input<number>;
    /**
     * Timeout for an individual attempt. If exceeded, the attempt will be considered failure and potentially retried. Default
     * 5000ms
     */
    singleAttemptTimeout?: pulumi.Input<number>;
    /**
     * Overall timeout in milliseconds for the check before giving up, default 10000
     */
    timeout?: pulumi.Input<number>;
}
